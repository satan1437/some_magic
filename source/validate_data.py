import re

Test_text = '''
{name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
‚åöÔ∏è {day_month} –≤ {start_time}
üë© {master}
–£—Å–ª—É–≥–∏:
{services}
—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é {record_link}
'''

list_keys = ['name', 'day_month', 'day_of_week', 'start_time', 'end_time', 'master', 'services']


def validate_data_reliable(text: str) -> bool:
	"""
	Time complexity: O(n)
	Space complexity: O(n)
	–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∫–æ–±–æ–∫.
	"""
	if text.count('{') != text.count('}'):
		return False
	raw_data = []
	start_pair, pair_closed = 0, True
	for indx, symbol in enumerate(text):
		if symbol == '{':
			if not pair_closed:
				return False
			start_pair = indx
			pair_closed = False
		elif symbol == '}':
			raw_data.append(text[start_pair:indx + 1])
			pair_closed = True
		if indx == len(text) - 1 and not pair_closed:
			return False
	return all([False for item in raw_data if item[1:-1:] not in list_keys])


def validate_data_lite(text: str) -> bool:
	"""
	Time complexity: O(n)
	Space complexity: O(n)
	–ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∫–æ–±–æ–∫.
	"""
	if text.count('{') != text.count('}'):
		return False
	raw_data = re.findall(r'\{[a-zA-Z_]+\}', text)  # noqa
	for item in raw_data:
		if item[1:-1:] not in list_keys:
			return False
	return True


if __name__ == '__main__':
	print(validate_data_lite(Test_text))
	print(validate_data_reliable(Test_text))
